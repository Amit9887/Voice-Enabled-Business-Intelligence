#!/bin/bash

# 🚀 Railway Deployment Script for Voice-Enabled Report Generation POC
# This script prepares your application for Railway deployment

set -e

echo "🚀 Preparing Voice-Enabled Report Generation POC for Railway Deployment"
echo "========================================================================"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if git is initialized
if [ ! -d ".git" ]; then
    print_error "Git repository not initialized. Please run: git init && git add . && git commit -m 'Initial commit'"
    exit 1
fi

print_status "Checking git status..."
if ! git diff --quiet; then
    print_warning "You have uncommitted changes. Please commit them before deploying."
    echo "Run: git add . && git commit -m 'Ready for deployment'"
    exit 1
fi

# Check if remote origin exists
if ! git remote get-url origin >/dev/null 2>&1; then
    print_error "No GitHub remote found. Please add your GitHub repository:"
    echo "git remote add origin https://github.com/yourusername/your-repo-name.git"
    exit 1
fi

print_success "Git repository is ready for deployment!"

# Create Railway-specific configuration
print_status "Creating Railway deployment configuration..."

# Create railway.json for service configuration
cat > railway.json << EOF
{
  "$schema": "https://railway.app/railway.schema.json",
  "build": {
    "builder": "DOCKERFILE",
    "dockerfilePath": "docker-compose.yml"
  },
  "deploy": {
    "startCommand": "docker-compose up",
    "healthcheckPath": "/api/voice/test",
    "healthcheckTimeout": 300,
    "restartPolicyType": "ON_FAILURE",
    "restartPolicyMaxRetries": 10
  }
}
EOF

# Create .railwayignore
cat > .railwayignore << EOF
# Development files
node_modules/
target/
*.log
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE files
.vscode/
.idea/
*.swp
*.swo

# OS files
.DS_Store
Thumbs.db

# Documentation
README.md
DEPLOYMENT_GUIDE.md
QUICK_START.md
PROJECT_OVERVIEW.md

# Scripts
setup.sh
start.sh
stop.sh
test-setup.sh
test-api.sh
deploy-railway.sh
EOF

print_success "Railway configuration files created!"

# Create environment variables template
print_status "Creating environment variables template..."

cat > .env.railway << EOF
# Railway Environment Variables Template
# Copy these to your Railway dashboard environment variables

# Backend Environment Variables
SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/voice_report_poc
SPRING_DATASOURCE_USERNAME=postgres
SPRING_DATASOURCE_PASSWORD=\${PGPASSWORD}
SPRING_JPA_HIBERNATE_DDL_AUTO=update
SPRING_JPA_SHOW_SQL=false
SPRING_PROFILES_ACTIVE=production

# Frontend Environment Variables
REACT_APP_API_URL=\${BACKEND_URL}/api
GENERATE_SOURCEMAP=false

# Database Environment Variables (Auto-generated by Railway)
PGDATABASE=voice_report_poc
PGUSER=postgres
PGPASSWORD=\${RAILWAY_DATABASE_PASSWORD}
PGHOST=\${RAILWAY_DATABASE_HOST}
PGPORT=\${RAILWAY_DATABASE_PORT}
EOF

print_success "Environment variables template created!"

# Create deployment instructions
print_status "Creating deployment instructions..."

cat > RAILWAY_DEPLOYMENT.md << EOF
# 🚀 Railway Deployment Instructions

## Quick Deploy Steps

### 1. Push to GitHub
\`\`\`bash
git add .
git commit -m "Ready for Railway deployment"
git push origin main
\`\`\`

### 2. Deploy on Railway
1. Go to [railway.app](https://railway.app)
2. Sign up/Login with GitHub
3. Click "New Project" → "Deploy from GitHub repo"
4. Select your repository

### 3. Add PostgreSQL Database
1. In Railway dashboard, click "New" → "Database" → "PostgreSQL"
2. Railway will auto-generate connection details

### 4. Configure Environment Variables
Copy variables from \`.env.railway\` to Railway dashboard:

**Backend Service:**
- \`SPRING_DATASOURCE_URL\` = \`jdbc:postgresql://[host]:[port]/[database]\`
- \`SPRING_DATASOURCE_USERNAME\` = \`postgres\`
- \`SPRING_DATASOURCE_PASSWORD\` = \`[Railway auto-generated]\`
- \`SPRING_JPA_HIBERNATE_DDL_AUTO\` = \`update\`
- \`SPRING_JPA_SHOW_SQL\` = \`false\`

**Frontend Service:**
- \`REACT_APP_API_URL\` = \`https://[your-backend-url].railway.app/api\`

### 5. Deploy
Railway will automatically:
- Build your Docker containers
- Deploy all services
- Set up networking between services

### 6. Test Your Application
- Frontend: \`https://[your-frontend-url].railway.app\`
- Backend: \`https://[your-backend-url].railway.app/api/voice/test\`

## Troubleshooting

### Database Connection Issues
- Check environment variables are set correctly
- Ensure PostgreSQL service is running
- Verify connection string format

### Frontend Can't Reach Backend
- Update \`REACT_APP_API_URL\` with correct backend URL
- Check CORS configuration

### Build Failures
- Check Railway build logs
- Ensure all dependencies are in package.json/pom.xml

## Support
- Railway Discord: https://discord.gg/railway
- Railway Docs: https://docs.railway.app
EOF

print_success "Deployment instructions created!"

# Final checks
print_status "Performing final checks..."

# Check if all required files exist
required_files=("docker-compose.yml" "backend/pom.xml" "frontend/package.json")
for file in "${required_files[@]}"; do
    if [ ! -f "$file" ]; then
        print_error "Required file missing: $file"
        exit 1
    fi
done

print_success "All required files present!"

# Check if backend builds
print_status "Testing backend build..."
if ! cd backend && ./mvnw clean package -DskipTests -q; then
    print_error "Backend build failed. Please fix build issues before deploying."
    exit 1
fi
cd ..

print_success "Backend builds successfully!"

# Check if frontend builds
print_status "Testing frontend build..."
if ! cd frontend && npm install --silent && npm run build --silent; then
    print_error "Frontend build failed. Please fix build issues before deploying."
    exit 1
fi
cd ..

print_success "Frontend builds successfully!"

echo ""
echo "🎉 Your application is ready for Railway deployment!"
echo ""
echo "📋 Next Steps:"
echo "1. Review RAILWAY_DEPLOYMENT.md for detailed instructions"
echo "2. Push your code to GitHub: git push origin main"
echo "3. Go to railway.app and deploy from your GitHub repository"
echo "4. Add PostgreSQL database in Railway dashboard"
echo "5. Configure environment variables as shown in .env.railway"
echo ""
echo "🌐 Your app will be live at: https://[your-app-name].railway.app"
echo ""
echo "📚 Need help? Check RAILWAY_DEPLOYMENT.md or Railway docs at docs.railway.app"
